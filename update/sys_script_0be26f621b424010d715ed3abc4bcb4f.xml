<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>sys_journal_field</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition table="sys_journal_field">name=sc_request^ORname=incident^ORname=problem^ORname=change_request^EQ<item endquery="false" field="name" goto="false" newquery="false" operator="=" or="false" value="sc_request"/>
            <item endquery="false" field="name" goto="false" newquery="false" operator="=" or="true" value="incident"/>
            <item endquery="false" field="name" goto="false" newquery="false" operator="=" or="true" value="problem"/>
            <item endquery="false" field="name" goto="false" newquery="false" operator="=" or="true" value="change_request"/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>NewWorkNotes</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {

		gs.debug('Element is'+current.element.getDisplayValue());
	// This business rule works on the journal entry table and sends a new work notes to the destination ITSM system.
	
	//Initially check the supplier number if it is not empty and then send the work notes.
			var elementValue = '';
			var checkSupplierNumber = new GlideRecord('task');
			checkSupplierNumber.addQuery('sys_id', current.element_id);
			checkSupplierNumber.query();
			if(checkSupplierNumber.next())
				{
					if(checkSupplierNumber.u_supplier_number != '')
						{
							number = checkSupplierNumber.number;
							supplierNumber = checkSupplierNumber.u_supplier_number;
							
							if(current.name == 'incident')
							{
								entity = 'incident';
								ticketType = 'Incident';
							}
							
							if(current.name == 'sc_request')
							{
								entity = 'request';
								ticketType = 'ServiceRequest';
							}	
							
							if(current.name == 'problem')
							{
								entity = 'problem';
								ticketType = 'Problem';
							}
							
							if(current.name == 'change_request')
							{
								entity = 'change';
								ticketType = 'Change';
							}	
							
							
							//Now prepare the json payload and create a new record in the Transaction manager table.
							var newTXNRecord = new GlideRecord('x_105558_sia_adapt_transaction_manager');      
	
							newTXNRecord.initialize();                                                                          // initialization of the object.

							var jsonPayload = {};

							newTXNRecord.setValue('entity',ticketType);
							newTXNRecord.setValue('operation','WorkNotes');
							newTXNRecord.setValue('direction', 'Outbound');
							newTXNRecord.setValue('transaction_status', 'New');
							newTXNRecord.setValue('ticket_number', current.element_id);

							jsonPayload.CorrelationID = number+"";

							newTXNRecord.setValue('nnitid', supplierNumber);
							jsonPayload.NNITID = supplierNumber+"";

							jsonPayload.EntityType = entity+"";

							if(current.element == 'work_notes')
							{
								jsonPayload.ViewAccess = 'internal'+"";
								elementValue = 'Work notes';
							}	
								

							if(current.element == 'comments')
							{
								jsonPayload.ViewAccess = 'external'+"";
								elementValue = 'Additional comments';
							}
								
							

							jsonPayload.Note = current.sys_created_on +' - '+ gs.getUserDisplayName() + '('+elementValue+')'+ current.value.getDisplayValue().toString().trim();

							var jsonObject = new global.JSON();
							var str = jsonObject.encode(jsonPayload);

							// the code for creating a JSON Payload ends here.

							newTXNRecord.setValue('payload', str.toString().trim());

							//Now, insert the values into the table.
							newTXNRecord.insert();

							
							
							
							
						}
				}	
		
})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>ajvkumar</sys_created_by>
        <sys_created_on>2020-01-03 08:01:24</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>0be26f621b424010d715ed3abc4bcb4f</sys_id>
        <sys_mod_count>13</sys_mod_count>
        <sys_name>NewWorkNotes</sys_name>
        <sys_overrides/>
        <sys_package display_value="SIA-Adapter" source="x_105558_sia_adapt">c1ff409b1b710010d715ed3abc4bcb47</sys_package>
        <sys_policy/>
        <sys_scope display_value="SIA-Adapter">c1ff409b1b710010d715ed3abc4bcb47</sys_scope>
        <sys_update_name>sys_script_0be26f621b424010d715ed3abc4bcb4f</sys_update_name>
        <sys_updated_by>ajvkumar</sys_updated_by>
        <sys_updated_on>2020-02-18 14:31:36</sys_updated_on>
        <template/>
        <when>async</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=0be26f621b424010d715ed3abc4bcb4f"/>
</record_update>
