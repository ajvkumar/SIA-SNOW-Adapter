<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>sys_attachment</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition table="sys_attachment">table_name=incident^ORtable_name=sc_request^ORtable_name=problem^ORtable_name=change_request^EQ<item endquery="false" field="table_name" goto="false" newquery="false" operator="=" or="false" value="incident"/>
            <item endquery="false" field="table_name" goto="false" newquery="false" operator="=" or="true" value="sc_request"/>
            <item endquery="false" field="table_name" goto="false" newquery="false" operator="=" or="true" value="problem"/>
            <item endquery="false" field="table_name" goto="false" newquery="false" operator="=" or="true" value="change_request"/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>NewAttachment</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {

	gs.addInfoMessage('Attachment BR');
	
	
	//this is a function to convert the bytes into MB or KB or TB, etc.
	function formatBytes(bytes) 
	{
		var marker = 1024; // Change to 1000 if required
		var decimal = 3; // Change as required
		var kiloBytes = marker; // One Kilobyte is 1024 bytes
		var megaBytes = marker * marker; // One MB is 1024 KB
		var gigaBytes = marker * marker * marker; // One GB is 1024 MB
		var teraBytes = marker * marker * marker * marker; // One TB is 1024 GB

		// return bytes if less than a KB
		if(bytes < kiloBytes) return bytes + " Bytes";
		// return KB if less than a MB
		else if(bytes < megaBytes) return(bytes / kiloBytes).toFixed(decimal) + " KB";
		// return MB if less than a GB
		else if(bytes < gigaBytes) return(bytes / megaBytes).toFixed(decimal) + " MB";
		// return GB if less than a TB
		else return(bytes / gigaBytes).toFixed(decimal) + " GB";
	}
	
	// This Business rule will create a record in the transaction manager
	//Initially check if it is an incident or servicerequest or a problem or a change ticket. Then check if that ticket has a supplier number (NNITID).
	var number = '';
	var supplierNumber = '';
	var entity = '';
	var ticketType ='';
	var binaryData = '';
	
	var encodedData = '';
	
			// now check if the ticket has a NNIT ID (supplier number)
			var checkSupplierNumber = new GlideRecord('task');
			checkSupplierNumber.addQuery('sys_id', current.table_sys_id);
			checkSupplierNumber.query();
			if(checkSupplierNumber.next())
				{
					if(checkSupplierNumber.u_supplier_number != '')
						{
							number = checkSupplierNumber.number;
							supplierNumber = checkSupplierNumber.u_supplier_number;
							
							if(checkSupplierNumber.sys_class_name == 'incident')
							{
								entity = 'incident';
								ticketType = 'Incident';
							}
							
							if(checkSupplierNumber.sys_class_name == 'sc_request')
							{
								entity = 'request';
								ticketType = 'ServiceRequest';
							}	
							
							if(checkSupplierNumber.sys_class_name == 'problem')
							{
								entity = 'problem';
								ticketType = 'Problem';
							}
							
							if(checkSupplierNumber.sys_class_name == 'change_request')
							{
								entity = 'change';
								ticketType = 'Change';
							}	
														
							encodedData = new GlideSysAttachment().getContentBase64(current);


						}
				}			
		
	
	if(supplierNumber != '')
		{
			// Now add these fields to the Transaction Manager table and prepare the json payload as well.
				var newTXNRecord = new GlideRecord('x_105558_sia_adapt_transaction_manager');      
	
				newTXNRecord.initialize();                                                                          // initialization of the object.
	
				//place the values of the incident into the respective fields of the Transaction Manager table.
	
				newTXNRecord.setValue('entity', ticketType);
				newTXNRecord.setValue('operation','Attachment');
				newTXNRecord.setValue('direction', 'Outbound');
				newTXNRecord.setValue('transaction_status', 'New');
				newTXNRecord.setValue('ticket_number', current.table_sys_id);
				newTXNRecord.setValue('nnitid', supplierNumber);
				newTXNRecord.setValue('file_name', current.file_name.getDisplayValue().toString().trim() );
				newTXNRecord.setValue('content_type', current.content_type.getDisplayValue());
				newTXNRecord.setValue('size_bytes', formatBytes(current.size_bytes));
				
				
				// Now prepare the Pay load to be sent to the destination ITSM tool.
				var jsonPayload = {};
				jsonPayload.CorrelationID = number.toString();
				jsonPayload.NNITID = supplierNumber.toString().trim();
				jsonPayload.EntityType = entity+"";
				jsonPayload.FileName = current.file_name.getDisplayValue().toString();
				jsonPayload.Payload = encodedData + "";
				

				var jsonObject = new global.JSON();
				var str = jsonObject.encode(jsonPayload);

				// the code for creating a JSON Payload ends here.

				newTXNRecord.setValue('payload', str.toString().trim());

				//Now, insert the values into the table.
				newTXNRecord.insert();

		}
	
	
	


})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>ajvkumar</sys_created_by>
        <sys_created_on>2020-01-02 11:52:47</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>8e0e4f121b820010d715ed3abc4bcbd8</sys_id>
        <sys_mod_count>21</sys_mod_count>
        <sys_name>NewAttachment</sys_name>
        <sys_overrides/>
        <sys_package display_value="SIA-Adapter" source="x_105558_sia_adapt">c1ff409b1b710010d715ed3abc4bcb47</sys_package>
        <sys_policy/>
        <sys_scope display_value="SIA-Adapter">c1ff409b1b710010d715ed3abc4bcb47</sys_scope>
        <sys_update_name>sys_script_8e0e4f121b820010d715ed3abc4bcbd8</sys_update_name>
        <sys_updated_by>ajvkumar</sys_updated_by>
        <sys_updated_on>2020-01-02 15:03:48</sys_updated_on>
        <template/>
        <when>after</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=8e0e4f121b820010d715ed3abc4bcbd8"/>
</record_update>
