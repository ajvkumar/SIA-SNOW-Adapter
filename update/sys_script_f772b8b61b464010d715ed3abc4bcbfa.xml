<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_105558_sia_adapt_transaction_manager</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition table="x_105558_sia_adapt_transaction_manager">direction=Outbound^EQ<item display_value="Outbound" endquery="false" field="direction" goto="false" newquery="false" operator="=" or="false" value="Outbound"/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>ExecuteOutbound</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) 
 {
	var response;
	var responseBody;
	var httpStatus;
	var r;
	var message;
	
	if(current.operation.getDisplayValue() == 'NewTicket')
		{
			try { 
				r = new sn_ws.RESTMessageV2();
				r.setHttpMethod('POST');
				
				if(current.entity.getDisplayValue() == 'Incident')
					r.setEndpoint('https://itsmintegration-test.nnit.com/ws/rest/itsm/v1.0/incident');
				
				if(current.entity.getDisplayValue() == 'ServiceRequest')
					r.setEndpoint('https://itsmintegration-test.nnit.com/ws/rest/itsm/v1.0/request');
				
				if(current.entity.getDisplayValue() == 'Problem')
					r.setEndpoint('https://itsmintegration-test.nnit.com/ws/rest/itsm/v1.0/problem');
			
				r.setBasicAuth('hempel@nnititsmaccount-HS2ASU','a8538b78-61e3-492c-b110-fcabddbde1d0');
				//r.setAuthenticationProfile('basic','Hempel');
				r.setMIDServer('SIA-Testing-MidServer');


				r.setEccParameter('skip_sensor', true);
				r.setRequestBody(current.payload.toString());
				response = r.execute();
				responseBody = response.getBody();
				httpStatus = response.getStatusCode();

				current.response = responseBody.toString();
				current.response_code = httpStatus.toString();
				if(httpStatus.toString().startsWith("40"))
					{
						current.transaction_status = "Error";
						current.update();
					}
					
				
			if(httpStatus.toString().startsWith("20"))
					{
						current.transaction_status = "Processed";
						
						current.nnitid = JSON.parse(responseBody.toString()).NNITID.toString().trim();
						current.update();
						
						var rec = new GlideRecord('task');
						rec.addQuery('sys_id',current.ticket_number);
						rec.query();
						if(rec.next())
							{
								rec.setValue('u_supplier_number',current.nnitid);
								rec.update();
							}
						
					}
					
			}
			catch(ex) {
				message = ex.message;
			}
		}
	
	
	
	//Send a ticket update outbound.
	if(current.operation.getDisplayValue() == 'TicketUpdate')
		{
				
			try
				{
					r = new sn_ws.RESTMessageV2();
					r.setHttpMethod('PUT');
					
					
					if(current.entity.getDisplayValue() == 'Incident')
						r.setEndpoint('https://itsmintegration-test.nnit.com/ws/rest/itsm/v1.0/incident/'+current.nnitid);
				
					if(current.entity.getDisplayValue() == 'ServiceRequest')
						r.setEndpoint('https://itsmintegration-test.nnit.com/ws/rest/itsm/v1.0/request/'+current.nnitid);
				
					if(current.entity.getDisplayValue() == 'Problem')
						r.setEndpoint('https://itsmintegration-test.nnit.com/ws/rest/itsm/v1.0/problem/'+current.nnitid);
					
					r.setBasicAuth('hempel@nnititsmaccount-HS2ASU','a8538b78-61e3-492c-b110-fcabddbde1d0');
					//r.setAuthenticationProfile('basic','Hempel');
					r.setMIDServer('SIA-Testing-MidServer');


					r.setEccParameter('skip_sensor', true);
					r.setRequestBody(current.payload.toString());
					response = r.execute();
					responseBody = response.getBody();
					httpStatus = response.getStatusCode();
					
					current.response = responseBody.toString();
					current.response_code = httpStatus.toString();
					if(httpStatus.toString().startsWith("20"))
					{
						current.transaction_status = "Processed";
						current.update();
					}
					else
						{
							current.transaction_status = "Error";
							current.update();
						}
					
				}
			catch(ex)
				{
					message = ex.message;
				}
				
		}
	
	//Send a worknotes outbound     https://itsmintegration-test.nnit.com/ws/rest/itsm/v1.0/worknote/
	
	if(current.operation.getDisplayValue() == 'WorkNotes')
		{
				
			try
				{
					r = new sn_ws.RESTMessageV2();
					r.setHttpMethod('POST');
					r.setEndpoint('https://itsmintegration-test.nnit.com/ws/rest/itsm/v1.0/worknote/'+current.nnitid);
					r.setBasicAuth('hempel@nnititsmaccount-HS2ASU','a8538b78-61e3-492c-b110-fcabddbde1d0');
					//r.setAuthenticationProfile('basic','Hempel');
					r.setMIDServer('SIA-Testing-MidServer');


					r.setEccParameter('skip_sensor', true);
					r.setRequestBody(current.payload.toString());
					response = r.execute();
					responseBody = response.getBody();
					httpStatus = response.getStatusCode();
					
					current.response = responseBody.toString();
					current.response_code = httpStatus.toString();
					if(httpStatus.toString().startsWith("20"))
					{
						current.transaction_status = "Processed";
						current.update();
					}
					else
						{
							current.transaction_status = "Error";
							current.update();
						}
					
					
				}
			catch(ex)
				{
					message = ex.message;
				}
				
		}
	
	
	
	//send an attachment outbound.  https://itsmintegration-test.nnit.com/ws/rest/itsm/v1.0/attachment/{NNITID}
	if(current.operation.getDisplayValue() == 'Attachment')
		{
				
			try
				{
					r = new sn_ws.RESTMessageV2();
					r.setHttpMethod('POST');
					r.setEndpoint('https://itsmintegration-test.nnit.com/ws/rest/itsm/v1.0/attachment/'+current.nnitid);
					r.setBasicAuth('hempel@nnititsmaccount-HS2ASU','a8538b78-61e3-492c-b110-fcabddbde1d0');
					//r.setAuthenticationProfile('basic','Hempel');
					r.setMIDServer('SIA-Testing-MidServer');


					r.setEccParameter('skip_sensor', true);
					r.setRequestBody(current.payload.toString());
					response = r.execute();
					responseBody = response.getBody();
					httpStatus = response.getStatusCode();
					
					current.response = responseBody.toString();
					current.response_code = httpStatus.toString();
					if(httpStatus.toString().startsWith("20"))
					{
						current.transaction_status = "Processed";
						current.update();
					}
					else
						{
							current.transaction_status = "Error";
							current.update();
						}
					
				}
			catch(ex)
				{
					message = ex.message;
				}
				
		}
	
	
	
	//this part of the code is used for ServiceCI upsert.
	
	if(current.operation.getDisplayValue() == 'CI_Upsert')
		{
			try { 
				r = new sn_ws.RESTMessageV2();
				r.setHttpMethod('POST');
				
				r.setEndpoint('https://itsmintegration-test.nnit.com/ws/rest/itsm/v1.0/service');
			
				r.setBasicAuth('hempel@nnititsmaccount-HS2ASU','a8538b78-61e3-492c-b110-fcabddbde1d0');
				
				r.setMIDServer('SIA-Testing-MidServer');


				r.setEccParameter('skip_sensor', true);
				r.setRequestBody(current.payload.toString());
				response = r.execute();
				responseBody = response.getBody();
				httpStatus = response.getStatusCode();

				current.response = responseBody.toString();
				current.response_code = httpStatus.toString();
				if(httpStatus.toString().startsWith("40"))
					{
						current.transaction_status = "Error";
						current.update();
					}
					
				
			if(httpStatus.toString().startsWith("20"))
					{
						current.transaction_status = "Processed";
						
						current.nnitid = JSON.parse(responseBody.toString()).NNITID.toString().trim();
						current.update();
					}
					
			}
			catch(ex) {
				message = ex.message;
			}
		}
	
	
})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>ajvkumar</sys_created_by>
        <sys_created_on>2020-01-03 13:52:54</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>f772b8b61b464010d715ed3abc4bcbfa</sys_id>
        <sys_mod_count>57</sys_mod_count>
        <sys_name>ExecuteOutbound</sys_name>
        <sys_overrides/>
        <sys_package display_value="SIA-Adapter" source="x_105558_sia_adapt">c1ff409b1b710010d715ed3abc4bcb47</sys_package>
        <sys_policy/>
        <sys_scope display_value="SIA-Adapter">c1ff409b1b710010d715ed3abc4bcb47</sys_scope>
        <sys_update_name>sys_script_f772b8b61b464010d715ed3abc4bcbfa</sys_update_name>
        <sys_updated_by>ajvkumar</sys_updated_by>
        <sys_updated_on>2020-07-06 12:41:18</sys_updated_on>
        <template/>
        <when>async</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=f772b8b61b464010d715ed3abc4bcbfa"/>
</record_update>
